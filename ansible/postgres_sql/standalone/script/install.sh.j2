#!/bin/bash

# dpkg --configure -a

apt update

apt install curl

curl -O https://repo.percona.com/apt/percona-release_latest.generic_all.deb
apt install gnupg2 lsb-release ./percona-release_latest.generic_all.deb
apt update
percona-release setup ppg17
apt install percona-postgresql-17
apt install python3-pip python3-dev binutils
apt install percona-patroni \
etcd etcd-server etcd-client \
percona-pgbackrest

systemctl stop {etcd,patroni,postgresql}
systemctl disable {etcd,patroni,postgresql}
systemctl stop postgresql
rm -rf /var/lib/postgresql/17/main

########################

touch /etc/tmpfiles.d/postgresql.conf
echo "d /var/run/postgresql 0775 postgres postgres -" > /etc/tmpfiles.d/postgresql.conf

## second way
#sudo nano /etc/systemd/system/patroni.service
#ExecStartPre=/bin/mkdir -p /var/run/postgresql
#ExecStartPre=/bin/chown postgres:postgres /var/run/postgresql
#ExecStartPre=/bin/chmod 775 /var/run/postgresql


########################
mv /tmp/etcd.conf.yaml /etc/etcd

########################
systemctl enable --now etcd
systemctl start etcd
systemctl status etcd
########################################

export NODE_NAME=`hostname -f`
export NODE_IP={{node_ip}}
DATA_DIR="/var/lib/postgresql/17/main"
PG_BIN_DIR="/usr/lib/postgresql/17/bin"

NAMESPACE="percona_lab"
SCOPE="cluster_1"

echo "
namespace: ${NAMESPACE}
scope: ${SCOPE}
name: ${NODE_NAME}

restapi:
    listen: 0.0.0.0:8008
    connect_address: ${NODE_IP}:8008

etcd3:
    host: ${NODE_IP}:2379

bootstrap:
  # this section will be written into Etcd:/<namespace>/<scope>/config after initializing new cluster
  dcs:
      ttl: 30
      loop_wait: 10
      retry_timeout: 10
      maximum_lag_on_failover: 1048576

      postgresql:
          use_pg_rewind: true
          use_slots: true
          parameters:
              wal_level: replica
              hot_standby: "on"
              wal_keep_segments: 10
              max_wal_senders: 5
              max_replication_slots: 10
              wal_log_hints: "on"
              logging_collector: 'on'
              max_wal_size: '10GB'
              archive_mode: "on"
              archive_timeout: 600s
              archive_command: "cp -f %p /home/postgres/archived/%f"

  # some desired options for 'initdb'
  initdb: # Note: It needs to be a list (some options need values, others are switches)
      - encoding: UTF8
      - data-checksums

  pg_hba: # Add following lines to pg_hba.conf after running 'initdb'
      - host replication replicator 127.0.0.1/32 trust
      - host replication replicator 0.0.0.0/0 md5
      - host all all 0.0.0.0/0 md5
      - host all all ::0/0 md5

  # Some additional users which needs to be created after initializing new cluster
  users:
      admin:
          password: qaz123
          options:
              - createrole
              - createdb
      percona:
          password: qaz123
          options:
              - createrole
              - createdb 

postgresql:
    cluster_name: cluster_1
    listen: 0.0.0.0:5432
    connect_address: ${NODE_IP}:5432
    data_dir: ${DATA_DIR}
    bin_dir: ${PG_BIN_DIR}
    pgpass: /tmp/pgpass0
    authentication:
        replication:
            username: replicator
            password: replPasswd
        superuser:
            username: postgres
            password: qaz123
    parameters:
        unix_socket_directories: "/var/run/postgresql/"
    create_replica_methods:
        - basebackup
    basebackup:
        checkpoint: 'fast'

tags:
    nofailover: false
    noloadbalance: false
    clonefrom: false
    nosync: false
" | sudo tee -a /etc/patroni/patroni.yml

##############################
SERVICE_FILE="/etc/systemd/system/percona-patroni.service"

# Check if the file exists
if [ ! -f "$SERVICE_FILE" ]; then
    echo "Service file does not exist. Creating $SERVICE_FILE..."
    cat << 'EOF' > "$SERVICE_FILE"
[Unit]
Description=Runners to orchestrate a high-availability PostgreSQL
After=syslog.target network.target 

[Service]
Type=simple 

User=postgres
Group=postgres 

# Start the patroni process
ExecStart=/bin/patroni /etc/patroni/patroni.yml 

# Send HUP to reload from patroni.yml
ExecReload=/bin/kill -s HUP $MAINPID 

# only kill the patroni process, not its children, so it will gracefully stop postgres
KillMode=process 

# Give a reasonable amount of time for the server to start up/shut down
TimeoutSec=30 

# Do not restart the service if it crashes, we want to manually inspect database on failure
Restart=no 

[Install]
WantedBy=multi-user.target
EOF
    echo "Service file created."
else
    echo "Service file $SERVICE_FILE already exists."
fi

###############################
systemctl daemon-reload
systemctl enable --now patroni

sed -i "s/^#listen_addresses = 'localhost'/listen_addresses = '*'/g" /etc/postgresql/17/main/postgresql.conf

systemctl restart patroni


##########################################################################

